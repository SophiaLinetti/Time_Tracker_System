datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  SUPERVISOR
  TEAMLEAD
  USER
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String?
  image         String?
  role          Role          @default(USER)
  timeEntries   TimeEntry[]
  editHistories EditHistory[] @relation("Editor")
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user User @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  timeEntries TimeEntry[]
}

model TimeEntry {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  startTime     DateTime
  endTime       DateTime
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  comment       String?
  isValid       Boolean     @default(true)
  editHistories EditHistory[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model EditHistory {
  id           String    @id @default(uuid())
  timeEntry    TimeEntry @relation(fields: [timeEntryId], references: [id])
  timeEntryId  String
  editor       User      @relation("Editor", fields: [editorId], references: [id])
  editorId     String
  oldStartTime DateTime
  oldEndTime   DateTime
  oldCategory  String
  oldComment   String?
  newStartTime DateTime
  newEndTime   DateTime
  newCategory  String
  newComment   String?
  reason       String
  editedAt     DateTime  @default(now())
}
 